import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:sn_progress_dialog/progress_dialog.dart';
part 'mensa.g.dart';
part 'mensa.freezed.dart';
@unfreezed
class Menu with _$Menu{
  factory Menu({
    @JsonKey(toJson: _timeToJson, fromJson: _timeFromJson)
    required DateTime date,
    @JsonKey(name: "creation_time", toJson: _tryTimeToJson, fromJson: _tryTimeFromJson)
    DateTime? creationTime,
    String? normal,
    String? veggie,
    String? pasta,
    String? dessert,

    bool? umbestellbar,
    @JsonKey(name: "is_auto_generated")
    bool? isAutoGenerated,
    bool? hidden,
    @JsonKey(includeIfNull: false, includeFromJson: false) @Default([])
    List<MenuOption> equalSelectableMenus,
    @JsonKey(includeIfNull: false, includeFromJson: false) @Default([])
    List<MenuOption> otherSelectableMenus,
    @JsonKey(includeIfNull: false, includeFromJson: false) @Default([])
    List<MenuOption> otherMenus,
  })=_Menu;



  factory Menu.fromJson(Map<String, dynamic> json) => _adaptInput(_$MenuFromJson(json));

  static Menu _adaptInput(Menu menu){
    if(menu.normal!=null)menu.equalSelectableMenus.add(MenuOption("Normal", menu.normal!));
    if(menu.veggie!=null)menu.equalSelectableMenus.add(MenuOption("Vegetarisch", menu.veggie!));
    if(menu.pasta!=null)menu.equalSelectableMenus.add(MenuOption("Pasta", menu.pasta!));
    if(menu.dessert!=null)menu.otherMenus.add(MenuOption("Nachtisch", menu.dessert!));
    menu.otherSelectableMenus.add(const MenuOption("Salatteller", "Salatteller"));
    return menu;
  }


  Future<bool> orderMeal(BuildContext context, String? mealCategory)async{
    bool success = false;
    ProgressDialog pd = ProgressDialog(context: context);
    ColorScheme scheme = Theme.of(context).colorScheme;
    String m = (mealCategory!=null)?'Bestelle "$mealCategory"...':"Abbestellen...";
    pd.show(barrierColor: scheme.background.withOpacity(0.7),msg: m, backgroundColor: scheme.surface,  msgColor: scheme.onBackground, progressValueColor: scheme.primary, msgMaxLines: 2,hideValue: true, elevation: 0.0);
    await Future.delayed(Durations.extralong4);
    pd.update(msg: "Erfolgreich!",);
    pd.close(delay: 1000);
    return success;
  }

  static DateTime? _tryTimeFromJson(String s) =>DateTime.tryParse(s);
  static DateTime _timeFromJson(String s) =>DateTime.parse(s);

  static String _timeToJson(DateTime dt)=>dt.toIso8601String();
  static String _tryTimeToJson(DateTime? dt)=>dt?.toIso8601String()??"";


}
@unfreezed
class MenuOption with _$MenuOption{
  factory MenuOption.fromJson(Map<String, dynamic> json) => _$MenuOptionFromJson(json);
  factory MenuOption(
    String category,
    String menu,
  )=_MenuOption;

}